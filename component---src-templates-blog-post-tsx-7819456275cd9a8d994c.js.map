{"version":3,"file":"component---src-templates-blog-post-tsx-7819456275cd9a8d994c.js","mappings":"+JAgDA,IA5CY,WAAO,IAAD,EAiBRA,EAAM,WAhBCC,EAAAA,EAAAA,gBAAe,cAgBRC,KAAKC,oBAAb,aAAG,EAAwBH,OAEvC,OACI,uBAAKI,UAAU,OACX,gBAAC,EAAAC,EAAD,CACID,UAAU,aACVE,OAAO,QACPC,QAAS,CAAC,OAAQ,OAAQ,QAC1BC,IAAI,4BACJC,MAAO,GACPC,OAAQ,GACRC,QAAS,GACTC,IAAI,kBARR,uBAUCZ,MAAAA,OAAA,EAAAA,EAAQa,OACL,yBACI,8BAASb,EAAOa,MAChB,2BACCb,EAAOc,QACR,2BACA,qBAAGC,KAAI,+BAAP,c,kFCgBpB,UAlDyB,SAAC,GAAwB,IAAD,EAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACxBC,EAAOF,EAAKG,eACZC,GAAY,UAAAJ,EAAKd,KAAKC,oBAAV,eAAwBkB,QAAxB,QACVC,EAAmBN,EAAnBM,SAAUC,EAASP,EAATO,KAElB,OACI,gBAAC,IAAD,CAAQN,SAAUA,EAAUI,MAAOD,GAC/B,gBAAC,IAAD,CAAKC,MAAOH,EAAKM,YAAYH,MAAOI,YAAaP,EAAKM,YAAYC,aAAeP,EAAKQ,UACtF,2BAAStB,UAAU,YAAYuB,WAAS,EAACC,SAAS,6BAC9C,8BACI,sBAAIC,SAAS,YAAYX,EAAKM,YAAYH,OAC1C,yBAAIH,EAAKM,YAAYM,OAEzB,2BAASC,wBAAyB,CAAEC,OAAQd,EAAKe,MAAQJ,SAAS,gBAClE,2BACA,2BACA,2BACA,uBAAKK,MAAO,CAAEC,OAAQ,aAClB,gBAAC,IAAD,QAGR,uBAAK/B,UAAU,iBACX,sBACI8B,MAAO,CACHE,QAAQ,OACRC,SAAS,OACTC,eAAe,gBACfC,UAAU,OACVC,QAAS,IAEb,0BACKlB,GACG,gBAAC,EAAAmB,KAAD,CAAMC,GAAIpB,EAASqB,OAAOC,KAAMC,IAAI,QAApC,KACOvB,EAASE,YAAYH,QAIpC,0BACKE,GACG,gBAAC,EAAAkB,KAAD,CAAMC,GAAInB,EAAKoB,OAAOC,KAAMC,IAAI,QAC3BtB,EAAKC,YAAYH,MADtB,Y","sources":["webpack://gatsby-starter-blog/./src/components/bio.tsx","webpack://gatsby-starter-blog/./src/templates/blog-post.tsx"],"sourcesContent":["import * as React from \"react\";\nimport { useStaticQuery, graphql } from \"gatsby\";\nimport { StaticImage } from \"gatsby-plugin-image\";\n\nconst Bio = () => {\n    const data = useStaticQuery(graphql`\n        query BioQuery {\n            site {\n                siteMetadata {\n                    author {\n                        name\n                        summary\n                    }\n                    social {\n                        twitter\n                    }\n                }\n            }\n        }\n    `);\n\n    const author = data.site.siteMetadata?.author;\n\n    return (\n        <div className=\"bio\">\n            <StaticImage\n                className=\"bio-avatar\"\n                layout=\"fixed\"\n                formats={[\"auto\", \"webp\", \"avif\"]}\n                src=\"../images/my_profile.jpeg\"\n                width={80}\n                height={80}\n                quality={95}\n                alt=\"Profile picture\"\n            />\n            {author?.name && (\n                <p>\n                    <strong>{author.name}</strong>\n                    <br />\n                    {author.summary}\n                    <br />\n                    <a href={`https://github.com/paerck25`}>Github</a>\n                </p>\n            )}\n        </div>\n    );\n};\n\nexport default Bio;\n","import * as React from \"react\";\nimport { Link, graphql } from \"gatsby\";\n\nimport Bio from \"../components/bio\";\nimport Layout from \"../components/layout\";\nimport Seo from \"../components/seo\";\n\nconst BlogPostTemplate = ({ data, location }) => {\n    const post = data.markdownRemark;\n    const siteTitle = data.site.siteMetadata?.title || `Title`;\n    const { previous, next } = data;\n\n    return (\n        <Layout location={location} title={siteTitle}>\n            <Seo title={post.frontmatter.title} description={post.frontmatter.description || post.excerpt} />\n            <article className=\"blog-post\" itemScope itemType=\"http://schema.org/Article\">\n                <header>\n                    <h1 itemProp=\"headline\">{post.frontmatter.title}</h1>\n                    <p>{post.frontmatter.date}</p>\n                </header>\n                <section dangerouslySetInnerHTML={{ __html: post.html }} itemProp=\"articleBody\" />\n                <br />\n                <br />\n                <hr />\n                <div style={{ margin: \"1.5rem 0\" }}>\n                    <Bio />\n                </div>\n            </article>\n            <nav className=\"blog-post-nav\">\n                <ul\n                    style={{\n                        display: `flex`,\n                        flexWrap: `wrap`,\n                        justifyContent: `space-between`,\n                        listStyle: `none`,\n                        padding: 0\n                    }}>\n                    <li>\n                        {previous && (\n                            <Link to={previous.fields.slug} rel=\"prev\">\n                                ← {previous.frontmatter.title}\n                            </Link>\n                        )}\n                    </li>\n                    <li>\n                        {next && (\n                            <Link to={next.fields.slug} rel=\"next\">\n                                {next.frontmatter.title} →\n                            </Link>\n                        )}\n                    </li>\n                </ul>\n            </nav>\n        </Layout>\n    );\n};\n\nexport default BlogPostTemplate;\n\nexport const pageQuery = graphql`\n    query BlogPostBySlug($id: String!, $previousPostId: String, $nextPostId: String) {\n        site {\n            siteMetadata {\n                title\n            }\n        }\n        markdownRemark(id: { eq: $id }) {\n            id\n            excerpt(pruneLength: 160)\n            html\n            frontmatter {\n                title\n                date(formatString: \"YYYY-MM-DD, hh:mm a\")\n                description\n            }\n        }\n        previous: markdownRemark(id: { eq: $previousPostId }) {\n            fields {\n                slug\n            }\n            frontmatter {\n                title\n            }\n        }\n        next: markdownRemark(id: { eq: $nextPostId }) {\n            fields {\n                slug\n            }\n            frontmatter {\n                title\n            }\n        }\n    }\n`;\n"],"names":["author","useStaticQuery","site","siteMetadata","className","S","layout","formats","src","width","height","quality","alt","name","summary","href","data","location","post","markdownRemark","siteTitle","title","previous","next","frontmatter","description","excerpt","itemScope","itemType","itemProp","date","dangerouslySetInnerHTML","__html","html","style","margin","display","flexWrap","justifyContent","listStyle","padding","Link","to","fields","slug","rel"],"sourceRoot":""}